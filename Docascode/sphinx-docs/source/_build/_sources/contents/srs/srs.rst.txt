Software Requirements Specification (SRS) for CLI Media Player
================================================================

1. Introduction
----------------------------------------------------------------

1.1. Purpose
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This document outlines the requirements for a Command-Line Interface (CLI)
application developed for Linux that will allow users to browse and play media
files (audio and video), manage playlists, and edit file metadata. The
application will also integrate with an NXP S32K144 microcontroller board
for hardware control and display.

1.2. Scope
~~~~~~~~~~~

This application will provide basic media browsing and playback functionality,
including playlist management and metadata editing. It will also enable
control and information display through an external S32K144 board. This
document covers the features, functionalities, performance, and interface
requirements for this application.

1.3. Definitions, Acronyms, and Abbreviations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* **CLI:** Command-Line Interface
* **SRS:** Software Requirements Specification
* **USB:** Universal Serial Bus
* **SDL2:** Simple DirectMedia Layer 2
* **ADC:** Analog-to-Digital Converter
* **Taglib:** A library for reading and editing the meta-data of several popular
  audio and video formats.
* **Metadata:** Data that provides information about other data (e.g., artist,
  title, duration).
* **S32K144:** NXP S32K144 microcontroller board.

1.4. References
~~~~~~~~~~~~~~~~

* SDL2 Library Documentation: `<Link to SDL2 documentation>`_
* Taglib Library Documentation: `<Link to Taglib documentation>`_
* NXP S32K144 Board Documentation: `<Link to S32K144 documentation>`_

2. Overall Description
----------------------

2.1. Product Perspective
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The CLI Media Player will be a standalone application running on Linux. It will
interact directly with the file system and utilize external libraries (SDL2 and
Taglib) for media playback and metadata handling. It will also communicate
with an external S32K144 board via a communication interface (e.g., serial).

2.2. Product Functions
~~~~~~~~~~~~~~~~~~~~~~

The application will provide the following key functionalities:

* **File System Browsing:** Allow users to navigate through directories and
  subdirectories, including mounted USB devices.
* **Media File Listing:** Display a paginated list of audio and video files
  within a specified directory.
* **Playlist Management:** Enable users to create, view, update, and delete
  playlists.
* **Metadata Handling:** Display and edit metadata of audio and video files.
* **Media Playback:** Play audio files using SDL2 in a separate thread.
* **Volume Control:** Adjust the system volume.
* **S32K144 Integration:** Control playback and display information on the
  connected S32K144 board.

2.3. User Classes and Characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The primary user of this application will be a Linux user comfortable with
using the command line. They are expected to have media files stored on their
local machine or on external USB drives. Technical knowledge of media file
formats is not required, but some familiarity with basic file system concepts
is assumed.

2.4. Operating Environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* **Operating System:** Linux (specific distributions may need to be considered
  for testing)
* **Hardware:** Standard PC with sufficient resources to run SDL2 and handle
  media playback. A USB port is required for external drive access. A serial
  communication port (or other appropriate interface) is needed to connect to
  the S32K144 board.
* **Dependencies:**
    * C/C++ Compiler (e.g., GCC, Clang)
    * SDL2 Library
    * Taglib Library
    * Development libraries for serial communication (if applicable for
      S32K144 communication)

2.5. Design and Implementation Constraints
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* **Programming Languages:** C and C++
* **Interface:** Command-Line Interface (CLI)
* **Libraries:** Must utilize SDL2 for audio playback and Taglib for metadata
  handling.
* **Portability:** Primary target is Linux, portability to other operating
  systems is not a primary concern for this version.
* **External Libraries:** The application must correctly link and utilize the
  specified external libraries.
* **Error Handling:** The application should include robust error handling for
  file operations, library interactions, and device communication.

2.6. User Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~

A basic README file will be provided, outlining installation instructions,
basic usage, and available commands.

2.7. Assumptions and Dependencies
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* It is assumed that the necessary libraries (SDL2, Taglib) are installed on
  the user's system or can be installed through standard package managers.
* The S32K144 board is properly configured and connected to the host machine.
* The user has appropriate permissions to access files and mount USB drives.

3. Specific Requirements
-------------------------------

3.1. Functional Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3.1.1. Media File Browsing and Listing (FR-BROWSE-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* FR-BROWSE-1.1: The application shall be able to be launched from any
  directory in the Linux file system.
* FR-BROWSE-1.2: The application shall be able to access and process files on
  mounted USB drives.
* FR-BROWSE-1.3: The application shall provide a command to list all audio and
  video files recursively within a specified directory (including
  subdirectories).
* FR-BROWSE-1.4: The listed files shall be paginated, displaying a maximum of
  25 files per page.
* FR-BROWSE-1.5: The user shall be able to navigate through the pages of the
  file list.
* FR-BROWSE-1.6: The file list shall display relevant information such as
  filename and file size.

3.1.2. Playlist Management (FR-PLAYLIST-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* FR-PLAYLIST-1.1: The application shall provide a command to display a list
  of existing playlists.
* FR-PLAYLIST-1.2: The application shall provide a command to view the
  contents of a specific playlist.
* FR-PLAYLIST-1.3: The application shall provide a command to create a new
  playlist with a user-defined name.
* FR-PLAYLIST-1.4: The application shall provide a command to add media files
  (from the file list or by specifying a file path) to a specific playlist.
* FR-PLAYLIST-1.5: The application shall provide a command to remove media
  files from a specific playlist.
* FR-PLAYLIST-1.6: The application shall provide a command to delete an
  existing playlist.
* FR-PLAYLIST-1.7: Playlists shall be persisted between application sessions.

3.1.3. Metadata Handling (FR-METADATA-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* FR-METADATA-1.1: The application shall provide a command to view the
  metadata of a selected media file (either from the file list or a
  playlist).
* FR-METADATA-1.2: For audio files, the displayed metadata shall include (if
  available): Track Name, Album, Artist, Duration, Genre, Publisher, Publish
  Year, and any other relevant tags supported by Taglib.
* FR-METADATA-1.3: For video files, the displayed metadata shall include (if
  available): Name, Size, Duration, Bitrate, Codec, and any other relevant
  tags supported by Taglib.
* FR-METADATA-1.4: The application shall provide a command to edit the
  metadata of a selected media file.
* FR-METADATA-1.5: Users shall be able to change the values of existing
  metadata tags.
* FR-METADATA-1.6: Users shall be able to add new metadata tags and their
  corresponding values.
* FR-METADATA-1.7: Metadata changes shall be saved to the media file.

3.1.4. Media Playback (FR-PLAYBACK-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* FR-PLAYBACK-1.1: The application shall provide a command to play a selected
  audio file (either from the file list or a playlist).
* FR-PLAYBACK-1.2: Audio playback shall be handled in a separate thread to
  avoid blocking the main application.
* FR-PLAYBACK-1.3: The application shall provide commands for "Play/Pause",
  "Next Song", and "Previous Song".
* FR-PLAYBACK-1.4: When a song finishes playing, the application shall
  automatically move to the next song in the current context (either the file
  list or the current playlist).
* FR-PLAYBACK-1.5: The application shall display the current playback time and
  the total duration of the playing song.

3.1.5. Volume Control (FR-VOLUME-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* FR-VOLUME-1.1: The application shall provide a command to increase the
  system volume.
* FR-VOLUME-1.2: The application shall provide a command to decrease the
  system volume.
* FR-VOLUME-1.3: The application shall display the current system volume level.

3.1.6. S32K144 Board Integration (FR-S32K144-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* FR-S32K144-1.1: The application shall establish communication with the
  S32K144 board (specify communication protocol later).
* FR-S32K144-1.2: The application shall read analog input from the S32K144
  board's ADC to control the volume.
* FR-S32K144-1.3: Changes in the ADC value shall adjust the system volume.
* FR-S32K144-1.4: The application shall receive signals from buttons pressed
  on the S32K144 board to control playback: Play/Pause, Stop, Next,
  Previous.
* FR-S32K144-1.5: When a song is playing, the application shall transmit
  song information (e.g., Track Name, Artist) to the S32K144 board for
  display on its screen.

3.2. Interface Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3.2.1. User Interface (UI)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* UI-1: The application shall provide a command-line interface for all
  functionalities.
* UI-2: Commands shall be intuitive and easy to understand.
* UI-3: The application shall provide clear and informative feedback to the
  user.
* UI-4: The application shall handle invalid user input gracefully and provide
  appropriate error messages.

3.2.2. Hardware Interfaces
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* HW-1: The application shall interface with the S32K144 board via
  [Specify communication protocol: e.g., serial (UART), USB].
* HW-2: The application shall correctly interpret ADC values received from
  the S32K144 for volume control.
* HW-3: The application shall correctly interpret button press signals from
  the S32K144 for playback control.
* HW-4: The application shall format and send song information to the
  S32K144 for display.

3.2.3. Software Interfaces
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* SW-1: The application shall utilize the SDL2 library for audio playback.
* SW-2: The application shall utilize the Taglib library for reading and
  writing media file metadata.
* SW-3: The application shall use standard C/C++ library functions for file
  system operations.

3.3. Performance Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* PERF-1: The application shall respond to user commands within a reasonable
  timeframe (e.g., listing files should not take an excessive amount of time
  for large directories).
* PERF-2: Media playback should be smooth and without interruptions.
* PERF-3: Metadata reading and writing operations should be efficient.
* PERF-4: Communication with the S32K144 board should be timely to ensure
  responsiveness.

3.4. Design Constraints
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* DC-1: The application must be implemented in C and C++.
* DC-2: The application must use the specified external libraries (SDL2,
  Taglib).
* DC-3: The application should be designed in a modular way to facilitate
  future enhancements and maintenance.

3.5. Software Quality Attributes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3.5.1. Usability
^^^^^^^^^^^^^^^^^^^^^^^^^

The application should be easy to use and understand for users familiar with
command-line interfaces.

3.5.2. Reliability
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The application should be robust and handle errors gracefully, preventing
crashes.

3.5.3. Maintainability
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The code should be well-structured and documented to facilitate future
maintenance and modifications.

3.5.4. Performance
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The application should perform its functions efficiently and without noticeable
delays.

3.6. Other Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* OR-1: The application should handle different media file formats supported
  by SDL2 and Taglib.
* OR-2: Error messages should be informative and help the user diagnose
  issues.

4. Future Enhancements (Out of Scope for Current Version)
-----------------------------------------------------------------

* Support for video playback.
* More advanced playlist management features (e.g., shuffling, looping).
* Graphical user interface (GUI).
* Online streaming capabilities.

5. Appendices (Optional)
---------------------------------

* Sample CLI commands
* Data flow diagrams
