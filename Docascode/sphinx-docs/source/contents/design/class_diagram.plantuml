@startuml Media Player Class Diagram

' Style configurations
skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor white
    ArrowColor black
    BorderColor black
}



package View {
    ' class CLI {
    '     - currentPage: int
    '     - itemsPerPage: int
    '     + showMainMenu()
    '     + showMediaList(files: vector<shared_ptr<MediaFile>>)
    '     + showPlaylistMenu()
    '     + showMetadataMenu(file: shared_ptr<MediaFile>)
    '     + showPlayerControls()
    '     + showVolume(level: int)
    ' }

    class CLIManager{
        - currentPlayView: CurrentPlayView
        - menuView: MenuView
    }

    class CurrentPlayView{
        - volumeCurrentView: VolumeCurrentView
        - metadataCurrentView: MetadataCurrentView
        - menuControlPlayView: MenuControlPlayView
    }

    class VolumeCurrentView{
        + showVolume()
    }

    class MetadataCurrentView{
        + showFileName()
        + showPathName()
        + showSize()
        + showDuration()
        + showFileType()
        - metadataCurrentAudioView: MetadataCurrentAudioView
        - metadataCurrentVideoView: MetadataCurrentVideoView
    }

    class MetadataCurrentAudioView{
        + showTrackName()
        + showAlbum()
        + showArtist()
        + showPublisher()
        + showGenre()
        + showBitrate()
        + showSampleRate()
    }

    class MetadataCurrentVideoView{
        + showResolution()
        + showFrameRate()
        + showCodec()
        + showBitrate()
    }

    class MenuControlPlayView{
        + playButton()
        + pauseButton()
        + nextButton()
        + previousButton()
        + increaseVolumeButton()
        + decreaseVolumeButton()
    }

    class MenuView{
        + showAllMediaFile()
        + showAllPlaylist()
        + showPlaylistContent()
        + menuFileHandlingView : MenuFileHandlingView 
        + menuPlaylistHandlingView : MenuPlaylistHandlingView
    }

    class MenuFileHandlingView{
        + showAddFile()
        + showRemoveFile()
        + showEditFile()
    }

    class MenuPlaylistHandlingView{
        + showCreatePlaylist()
        + showEditPlaylist()
        + showDeletePlaylist()
    }
}

CLIManager --> CurrentPlayView
CurrentPlayView --> VolumeCurrentView
CurrentPlayView --> MetadataCurrentView
MetadataCurrentView --> MetadataCurrentAudioView
MetadataCurrentView --> MetadataCurrentVideoView
CurrentPlayView --> MenuControlPlayView
CLIManager --> MenuView
MenuView --> MenuFileHandlingView
MenuView --> MenuPlaylistHandlingView


package Controller {
    class MediaController {
        - mediaScanner: MediaScanner*
        - player: MediaPlayer*
        - playlistManager: PlaylistManager*
        - deviceManager: DeviceManager*
        + scanDirectory(path: string)
        + playMedia(file: MediaFile*)
        + pauseMedia()
        + stopMedia()
        + nextTrack()
        + previousTrack()
        + setVolume(level: int)
    }
    
    class MediaScanner {
        - supportedFormats: vector<string>
        + scanDirectory(path: string): vector<shared_ptr<MediaFile>>
        + scanUSB(): vector<shared_ptr<MediaFile>>
        - mountUSB()
        - unmountUSB()
    }
    
    class MediaPlayer {
        - currentFile: MediaFile*
        - isPlaying: bool
        - currentPosition: int
        + play(file: MediaFile*)
        + pause()
        + stop()
        + seek(position: int)
        + getCurrentPosition(): int
        - initSDL()
        - cleanupSDL()
    }
}
package Model {
    abstract class MediaFile {
        - fileName : String
        - pathName : String
        - size : double
        - duration : String
        - fileType : String
        + getDuration(): int
        + getPath(): string
        + getName(): string
        + virtual editMediaFile() : void
        + virtual detailMediaFile() : void
        + virtual getType(): string
        + virtual ~MediaFile();
    }
    
    class AudioFile {
        - trackName : String
        - album : String
        - artist : String
        - publisher : String
        - genre : String
        - bitrate : int
        - sampleRate : int
        + getArtist(): string
        + getAlbum(): string
        + setArtist(artist: string)
        + getType() override : string
        + editMediaFile() override : void
        + detailMediaFile() override : void
    }
    
    class VideoFile {
        - codec: string
        - bitrate: int
        - resolution: string
        + getCodec(): string
        + getBitrate(): int
        + getResolution(): string
        + getType() override : string
        + editMediaFile() override : void
        + detailMediaFile() override : void
    }
    
    class Playlist {
        - id: int
        - name: string
        - mediaFiles: vector<shared_ptr<MediaFile>>
        + addFile(file: shared_ptr<MediaFile>)
        + removeFile(fileName: string)
        + getFilesfileName: string()
        + getName(): string
        + setName(name: string)
    }
    class MetadataManager {
        - listMediaFiles : vector<shared_ptr<MediaFile>>
        + addMediaFileFromUSB(file : shared_ptr<MediaFile>) : void
        + addMediaFileFromPC(file : shared_ptr<MediaFile>) : void
        + editMediaFile(file : shared_ptr<MediaFile>) : void
        + removeMediaFile(file : shared_ptr<MediaFile>) : void
        + displayAllMediaFiles() : void
    }
    
    class PlaylistManager {
        - playlists: vector<shared_ptr<Playlist>>
        + createPlaylist(name: string): shared_ptr<Playlist>
        + editPlaylist(id: int, name: string)
        + deletePlaylist(id: int)
        + getPlaylist(id: int): shared_ptr<Playlist>
        + getAllPlaylists(): playlists
    }
    
    class DeviceManager {
        - volume: int
        - s32k144Connection: S32K144Interface*
        + setVolume(level: int)
        + getVolume(): int
        + updateDisplay(info: string)
        + handleButtonPress(button: ButtonType)
    }
}


package Hardware {
    class S32K144Interface {
        - serialConnection: SerialPort*
        + connect()
        + disconnect()
        + readADC(): int
        + readButtons(): ButtonState
        + updateDisplay(text: string)
    }
}

enum MediaType {
    AUDIO
    VIDEO
}

enum ButtonType {
    PLAY_PAUSE
    NEXT
    PREVIOUS
    STOP
}

' Inheritance relationships
MediaFile <|-- AudioFile : extends
MediaFile <|-- VideoFile : extends

' Composition relationships (strong ownership)
PlaylistManager "1" o-- "0..*" Playlist : manages >
Playlist "1" o-- "0..*" MediaFile : contains >
MetadataManager "1" o-- "0..*" MediaFile : manages >
' Aggregation relationships (weak ownership)
MediaController o-- MediaScanner : uses >
MediaController o-- MediaPlayer : uses >
MediaController o-- PlaylistManager : uses >
MediaController o-- DeviceManager : uses >

' Association relationships
CLI "1" --> "1" MediaController : controls >
DeviceManager "1" --> "1" S32K144Interface : interfaces with >
MediaFile --> "1" MediaType : has type >
DeviceManager --> ButtonType : handles >



note "CLI depends on MediaController\nfor all operations" as N1
CLI .. N1
N1 .. MediaController

note "MediaController is the central\ncoordinator between all components" as N2
MediaController .. N2

note "DeviceManager handles all\nhardware interactions" as N3
DeviceManager .. N3

@enduml